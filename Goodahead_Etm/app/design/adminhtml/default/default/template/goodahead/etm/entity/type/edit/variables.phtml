<?php
/**
 * This file is part of Goodahead_Etm extension
 *
 * This extension allows to create and manage custom EAV entity types
 * and EAV entities
 *
 * Copyright (C) 2014 Goodahead Ltd. (http://www.goodahead.com)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * and GNU General Public License along with this program.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * @category   Goodahead
 * @package    Goodahead_Etm
 * @copyright  Copyright (c) 2014 Goodahead Ltd. (http://www.goodahead.com)
 * @license    http://www.gnu.org/licenses/lgpl-3.0-standalone.html GNU Lesser General Public License
 */
?>
<script type="text/javascript">
    GoodaheadvariablePlugin = {
        editor: null,
        variables: $H({}),
        textareaIds: $H({}),
        currentTextareaId: null,
        setEditor: function(editor) {
            this.editor = editor;
        },
        loadChooser: function(url, textareaId) {
            this.currentTextareaId = textareaId;
            this.textareaIds.set(textareaId, textareaId);
            if (!this.variables.get(textareaId)) {
                new Ajax.Request(url, {
                    parameters: {},
                    onComplete: function (transport) {
                        if (transport.responseText.isJSON()) {
                            Variables.init(null, 'GoodaheadvariablePlugin.insertVariable');
                            this.variables.set(textareaId, transport.responseText.evalJSON());
                            this.openChooser(this.variables.get(this.currentTextareaId));
                        }
                    }.bind(this)
                 });
            } else {
                this.openChooser(this.variables.get(this.currentTextareaId));
            }
            return;
        },
        openChooser: function(variables) {
            Variables.resetData();
            Variables.openVariableChooser(variables);
        },
        insertVariable : function (value) {
            if (this.textareaIds.get(this.currentTextareaId)) {
                Variables.init(this.currentTextareaId);
                Variables.insertVariable(value);
            } else {
                Variables.closeDialogWindow();
                this.editor.execCommand('mceInsertContent', false, value);
            }
            return;
        }
    };
</script>